// Generated by CoffeeScript 1.7.1
(function() {
  var ConnectionPool, amqp, getConnectionPool, log, pool, sanitize, timeout;

  amqp = require('amqplib');

  log = require('./logger')('pool');

  sanitize = function(url) {
    return url.replace(/\/\/[^@]*@/, '//<sanitized>@');
  };

  timeout = function(time, callback) {
    return setTimeout(callback, time);
  };

  ConnectionPool = (function() {
    var callbacks, connections, delays;

    connections = {};

    callbacks = {};

    delays = {};

    function ConnectionPool(delay) {
      this.delay = delay;
    }

    ConnectionPool.prototype.connect = function(url, callback) {
      if (!(url in connections)) {
        delays[url] = 0;
        this._connect(url);
      }
      (callbacks[url] || (callbacks[url] = [])).push(callback);
      return connections[url].then(function(connection) {
        return callback(connection);
      });
    };

    ConnectionPool.prototype._connect = function(url) {
      var q;
      q = connections[url] = amqp.connect(url);
      q.then((function(_this) {
        return function(connection) {
          connection.on('error', function(error) {
            log.error(error);
            return _this._reconnect(url);
          });
          return log.info("" + (sanitize(url)) + " connected");
        };
      })(this));
      q.then(null, (function(_this) {
        return function(error) {
          log.error(error);
          return _this._reconnect(url);
        };
      })(this));
      return q;
    };

    ConnectionPool.prototype._reconnect = function(url) {
      log.info("retry " + (sanitize(url)) + " in " + (this.delay + delays[url]));
      return timeout(this.delay + delays[url], (function(_this) {
        return function() {
          if (delays[url] < _this.delay * 5) {
            delays[url] += 1000;
          }
          return _this._connect(url).then(function(connection) {
            var cb, _i, _len, _ref, _results;
            delays[url] = 0;
            _ref = callbacks[url];
            _results = [];
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              cb = _ref[_i];
              _results.push(cb(connection));
            }
            return _results;
          });
        };
      })(this));
    };

    return ConnectionPool;

  })();

  pool = null;

  getConnectionPool = function(delay) {
    return pool || (pool = new ConnectionPool(delay));
  };

  module.exports = {
    getConnectionPool: getConnectionPool
  };

}).call(this);
