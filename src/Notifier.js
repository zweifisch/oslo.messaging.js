// Generated by CoffeeScript 1.8.0
(function() {
  var Connection, EventEmitter, Notifier, crypto, log, promise,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  crypto = require('crypto');

  EventEmitter = require('events').EventEmitter;

  promise = require('when').promise;

  log = require('./logger')('notifier');

  Connection = require('./Connection');

  Notifier = (function(_super) {
    __extends(Notifier, _super);

    function Notifier(_arg) {
      this.url = _arg.url, this.prefix = _arg.prefix, this.topic = _arg.topic, this.exchange = _arg.exchange, this.retryDelay = _arg.retryDelay, this.noAck = _arg.noAck, this.queue = _arg.queue, this.maxRetry = _arg.maxRetry;
      if (this.retryDelay == null) {
        this.retryDelay = 3000;
      }
      if (this.maxRetry == null) {
        this.maxRetry = 3;
      }
      if (this.queue == null) {
        this.queue = "" + (this.prefix || 'notifier') + "_" + (crypto.randomBytes(16).toString('hex'));
      }
      log.debug("queue: " + this.queue);
      this.connection = Connection.getConnection({
        retryDelay: this.retryDelay,
        urls: this.url,
        maxRetry: this.maxRetry
      });
    }

    Notifier.prototype.connect = function() {
      if (!this.q) {
        this.q = promise((function(_this) {
          return function(resolve, reject) {
            return _this.connection.connect(function(connection) {
              return connection.createChannel().then(function(channel) {
                var consumeQ, consumer;
                _this.channel = channel;
                _this.channel.assertExchange(_this.exchange, 'topic', {
                  autoDelete: false,
                  durable: false
                }).then(function() {
                  return log.info("exchange " + _this.exchange + " asserted");
                }).then(null, function(error) {
                  return _this.emit('error', error);
                });
                _this.channel.assertQueue(_this.queue, {
                  autoDelete: true,
                  durable: false
                }).then(function() {
                  return log.info("queue " + _this.queue + " asserted");
                }).then(null, function(error) {
                  return _this.emit('error', error);
                });
                _this.channel.bindQueue(_this.queue, _this.exchange, _this.topic).then(function() {
                  return log.info("topic " + _this.topic + " binded");
                }).then(null, function(error) {
                  return _this.emit('error', error);
                });
                consumer = function(msg) {
                  var decoded;
                  decoded = JSON.parse(msg.content.toString());
                  log.debug(decoded);
                  if (_this.noAck) {
                    return _this.callback(decoded);
                  } else {
                    return _this.callback(decoded, function() {
                      return _this.channel.ack(msg);
                    });
                  }
                };
                consumeQ = _this.channel.consume(_this.queue, consumer, {
                  noAck: _this.noAck
                });
                consumeQ.then(function() {
                  log.info("wait for notification on queue " + _this.queue);
                  _this.emit('ready', _this.queue);
                  return resolve(_this);
                });
                return consumeQ.then(null, function(error) {
                  _this.emit('error', error);
                  return reject(error);
                });
              });
            });
          };
        })(this));
      }
      return this.q;
    };

    Notifier.prototype.onMessage = function(callback) {
      return this.callback = callback;
    };

    return Notifier;

  })(EventEmitter);

  module.exports = Notifier;

}).call(this);
